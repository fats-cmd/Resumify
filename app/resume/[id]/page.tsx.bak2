"use client";

import React, { useState, useEffect, useRef } from "react";
import { useRouter, useParams } from "next/navigation";
import Image from "next/image";
import ProtectedPage from "@/components/protected-page";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { ThemeToggle } from "@/components/theme-toggle";
import { DynamicDock } from "@/components/dynamic-dock";
import { DashboardFooter } from "@/components/dashboard-footer";
import Link from "next/link";
import { useAuth } from "@/components/auth-provider";
import { getResumes } from "@/lib/supabase";
import { toast } from 'react-toastify';
import { 
  FileText, 
  Download, 
  Printer,
  Share2,
  Edit,
  ArrowLeft,
  Mail,
  Phone,
  MapPin,
  Briefcase,
  GraduationCap,
  User,
  Menu,
  X
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Resume, ResumeData } from "@/types/resume";
import { getTemplateComponent, getTemplateById } from "@/components/template-registry";
import TemplatePreview from "@/components/template-preview";

export default function ResumePage() {
  const router = useRouter();
  const { id } = useParams();
  const { user } = useAuth();
  const [resumeData, setResumeData] = useState<ResumeData | null>(null);
  const [loading, setLoading] = useState(true);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const resumeRef = useRef<HTMLDivElement>(null);

  // Load sidebar state from localStorage
  useEffect(() => {
    const savedCollapsedState = localStorage.getItem('sidebarCollapsed');
    if (savedCollapsedState !== null) {
      setSidebarCollapsed(JSON.parse(savedCollapsedState));
    }
    
    const savedOpenState = localStorage.getItem('sidebarOpen');
    if (savedOpenState !== null) {
      setSidebarOpen(JSON.parse(savedOpenState));
    }
  }, []);

  // Save sidebar state to localStorage
  useEffect(() => {
    localStorage.setItem('sidebarCollapsed', JSON.stringify(sidebarCollapsed));
  }, [sidebarCollapsed]);

  useEffect(() => {
    localStorage.setItem('sidebarOpen', JSON.stringify(sidebarOpen));
  }, [sidebarOpen]);

  // Fetch the resume data from Supabase
  useEffect(() => {
    const fetchResume = async () => {
      if (!user || !id) return;
      
      try {
        setLoading(true);
        const { data, error } = await getResumes(user.id);
        
        if (error) {
          console.error("Error fetching resume:", error);
          toast.error("Failed to load resume. Please try again later.");
          router.push("/dashboard");
        } else {
          const resume = data?.find((r: Resume) => r.id === parseInt(id as string));
          if (resume) {
            setResumeData(resume.data as ResumeData);
          } else {
            toast.error("Resume not found.");
            router.push("/dashboard");
          }
        }
      } catch (err) {
        console.error("Error fetching resume:", err);
        toast.error("Failed to load resume. Please try again later.");
        router.push("/dashboard");
      } finally {
        setLoading(false);
      }
    };

    if (user) {
      fetchResume();
    }
  }, [user, id, router]);

  const handleDownload = async () => {
    if (!resumeData) {
      toast.error("Resume data not available for download");
      return;
    }

    try {
      // Show loading toast
      toast.info("Preparing PDF for download...");
      
      // Create a completely isolated HTML document for printing
      const iframe = document.createElement('iframe');
      iframe.style.position = 'absolute';
      iframe.style.top = '-9999px';
      iframe.style.left = '-9999px';
      iframe.style.width = '210mm';
      iframe.style.minHeight = '297mm';
      document.body.appendChild(iframe);
      
      const iframeDoc = iframe.contentDocument || iframe.contentWindow?.document;
      if (!iframeDoc) {
        throw new Error("Could not access iframe document");
      }
      
      // Write a completely clean HTML document with print-optimized styles
      iframeDoc.open();
      iframeDoc.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>Resume</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              font-size: 12pt;
              line-height: 1.4;
              color: #000000;
              background-color: #ffffff;
              margin: 0;
              padding: 20px;
              width: 210mm;
              min-height: 297mm;
            }
            h1, h2, h3, h4, h5, h6 {
              color: #000000;
              margin: 0 0 10px 0;
            }
            h1 {
              font-size: 28px;
              margin: 0 0 10px 0;
            }
            h2 {
              font-size: 20px;
              border-bottom: 1px solid #000000;
              padding-bottom: 5px;
              margin: 0 0 15px 0;
            }
            h3 {
              font-size: 16px;
              margin: 0 0 5px 0;
            }
            p {
              color: #000000;
              margin: 0 0 10px 0;
            }
            .section {
              margin-bottom: 30px;
            }
            .contact-info {
              text-align: center;
              margin-bottom: 30px;
            }
            .experience-item, .education-item {
              margin-bottom: 20px;
            }
            .flex-between {
              display: flex;
              justify-content: space-between;
              flex-wrap: wrap;
            }
            .text-muted {
              color: #333333;
            }
            
            /* Print-specific styles */
            @media print {
              @page {
                margin: 0;
                size: A4;
              }
              body {
                margin: 0;
                padding: 20px;
                background-color: #ffffff;
                color: #000000;
              }
            }
          </style>
        </head>
        <body>
        </body>
        </html>
      `);
      iframeDoc.close();
      
      // Build the resume content in the iframe
      let html = `
        <div style="text-align: center; margin-bottom: 30px;">
          <h1>
            ${resumeData.personalInfo?.firstName || ''} ${resumeData.personalInfo?.lastName || ''}
          </h1>
          ${resumeData.personalInfo?.headline ? 
            `<p class="text-muted">${resumeData.personalInfo.headline}</p>` : ''}
        </div>
      `;
      
      // Contact information
      const contactInfo = [];
      if (resumeData.personalInfo?.email) contactInfo.push(`Email: ${resumeData.personalInfo.email}`);
      if (resumeData.personalInfo?.phone) contactInfo.push(`Phone: ${resumeData.personalInfo.phone}`);
      if (resumeData.personalInfo?.location) contactInfo.push(`Location: ${resumeData.personalInfo.location}`);
      
      if (contactInfo.length > 0) {
        html += `
          <div class="contact-info">
            <p>${contactInfo.join(' | ')}</p>
          </div>
        `;
      }
      
      // Summary
      if (resumeData.personalInfo?.summary) {
        html += `
          <div class="section">
            <h2>Summary</h2>
            <p>${resumeData.personalInfo.summary}</p>
          </div>
        `;
      }
      
      // Work Experience
      if (resumeData.workExperience && resumeData.workExperience.length > 0) {
        html += `
          <div class="section">
            <h2>Work Experience</h2>
        `;
        
        resumeData.workExperience.forEach(exp => {
          html += `
            <div class="experience-item">
              <div class="flex-between">
                <h3>${exp.position}</h3>
                <p class="text-muted">${exp.startDate} - ${exp.current ? "Present" : exp.endDate}</p>
              </div>
              <p class="text-muted">${exp.company}</p>
              <p>${exp.description}</p>
            </div>
          `;
        });
        
        html += `</div>`;
      }
      
      // Education
      if (resumeData.education && resumeData.education.length > 0) {
        html += `
          <div class="section">
            <h2>Education</h2>
        `;
        
        resumeData.education.forEach(edu => {
          html += `
            <div class="education-item">
              <div class="flex-between">
                <h3>${edu.degree}</h3>
                <p class="text-muted">${edu.startDate} - ${edu.endDate}</p>
              </div>
              <p class="text-muted">${edu.institution}</p>
              <p class="text-muted">${edu.field}</p>
              <p>${edu.description}</p>
            </div>
          `;
        });
        
        html += `</div>`;
      }
      
      // Skills
      if (resumeData.skills && resumeData.skills.length > 0) {
        html += `
          <div class="section">
            <h2>Skills</h2>
            <p>${resumeData.skills.join(', ')}</p>
          </div>
        `;
      }
      
      // Add the content to the iframe
      iframeDoc.body.innerHTML = html;
      
      // Sanitize filename for the print dialog
      const firstName = (resumeData.personalInfo?.firstName || 'Unknown').replace(/[^a-zA-Z0-9]/g, '_');
      const lastName = (resumeData.personalInfo?.lastName || 'User').replace(/[^a-zA-Z0-9]/g, '_');
      const filename = `${firstName}_${lastName}_Resume.pdf`;
      
      // Set the document title for the print dialog
      iframeDoc.title = filename;
      
      // Small delay to ensure content is rendered
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Focus the iframe and trigger print
      iframe.contentWindow?.focus();
      iframe.contentWindow?.print();
      
      // Clean up after a delay to allow printing
      setTimeout(() => {
        if (iframe.parentNode) {
          document.body.removeChild(iframe);
        }
        toast.dismiss();
        toast.success("Resume PDF download started. Check your browser's print dialog.");
      }, 2000);
      
    } catch (error) {
      console.error("Error preparing PDF:", error);
      toast.dismiss();
      
      // Clean up in case of error
      const iframe = document.querySelector('iframe[style*="position: absolute; top: -9999px;"]');
      if (iframe && iframe.parentNode) {
        document.body.removeChild(iframe);
      }
      
      if (error instanceof Error) {
        toast.error(`Error: ${error.message}`);
      } else {
        toast.error("Failed to prepare resume for download. Please try again.");
      }
    }
  };

  const handlePrint = () => {
    toast.info("Preparing resume for printing...");
    
    // Add print-specific styles
    const printStyles = document.createElement('style');
    printStyles.innerHTML = `
      @media print {
        body * {
          visibility: hidden;
        }
        .pdf-content, .pdf-content * {
          visibility: visible;
          color: #000000 !important;
          background-color: #ffffff !important;
        }
        .pdf-content {
          position: absolute;
          left: 0;
          top: 0;
          width: 100%;
          box-shadow: none !important;
        }
        .pdf-content .absolute {
          display: none !important;
        }
        .no-print, .no-print * {
          display: none !important;
        }
        /* Hide browser default headers/footers */
        @page {
          margin: 0;
        }
        body {
          margin: 0;
          padding: 0;
          background-color: #ffffff !important;
        }
      }
    `;
    document.head.appendChild(printStyles);
    
    // Add no-print class to elements we don't want to print
    const header = document.querySelector('header');
    const dock = document.querySelector('.fixed.bottom-8');
    const buttons = document.querySelectorAll('button');
    
    if (header) header.classList.add('no-print');
    if (dock) dock.classList.add('no-print');
    buttons.forEach(button => button.classList.add('no-print'));
    
    // Print after a short delay to ensure styles are applied
    setTimeout(() => {
      window.print();
      
      // Clean up after print
      setTimeout(() => {
        document.head.removeChild(printStyles);
        if (header) header.classList.remove('no-print');
        if (dock) dock.classList.remove('no-print');
        buttons.forEach(button => button.classList.remove('no-print'));
      }, 1000);
    }, 500);
  };

  const handleShare = () => {
    toast.success("Resume shared successfully!");
    // In a real app, this would open sharing options
  };

  // Get user's profile image or generate initials
  const getUserAvatar = () => {
    if (!user) return null;
    
    // Check if user has an avatar URL (uploaded image or custom avatar)
    const avatarUrl = user.user_metadata?.avatar_url;
    const customAvatar = user.user_metadata?.custom_image_avatar;
    
    // Add cache-busting parameter to avatar URL
    const cacheBustedAvatarUrl = avatarUrl ? `${avatarUrl}?t=${Date.now()}` : null;
    const displayAvatar = cacheBustedAvatarUrl || customAvatar;
    
    if (displayAvatar) {
      // Extract the base URL without cache-busting parameter for the Image component
      const [baseUrl] = displayAvatar.split('?t=');
      return (
        <Image 
          src={baseUrl} 
          alt="Profile" 
          width={32}
          height={32}
          className="rounded-full object-cover border-2 border-white/20"
          priority
        />
      );
    }
    
    // Generate initials from user's name or email
    const fullName = user.user_metadata?.full_name;
    const email = user.email || '';
    let initials = '';
    
    if (fullName) {
      const names = fullName.split(' ');
      initials = names[0].charAt(0) + (names.length > 1 ? names[names.length - 1].charAt(0) : '');
    } else if (email) {
      const emailParts = email.split('@');
      initials = emailParts[0].charAt(0);
    }
    
    return (
      <div className="w-8 h-8 rounded-full bg-white/20 border-2 border-white/30 flex items-center justify-center text-white text-sm font-medium">
        {initials.toUpperCase()}
      </div>
    );
  };

  if (loading) {
    return (
      <ProtectedPage>
        <div className="h-screen flex bg-background">
          {/* Sidebar Skeleton */}
          <div className={`fixed inset-y-0 left-0 z-50 bg-background transform ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} transition-transform duration-300 ease-in-out lg:translate-x-0 lg:flex-shrink-0 lg:h-screen ${
            sidebarCollapsed ? 'w-16 lg:w-16' : 'w-64 lg:w-80'
          }`}>
            <div className="h-full overflow-y-auto">
              <Card className="bg-card border-0 rounded-2xl overflow-hidden h-full">
                <CardHeader className="flex justify-between items-center">
                  <div>
                    <div className="h-5 w-32 bg-gray-200 dark:bg-gray-700 rounded animate-pulse" />
                    <div className="h-4 w-48 bg-gray-200 dark:bg-gray-700 rounded animate-pulse mt-1" />
                  </div>
                  <div className="lg:hidden">
                    <button 
                      onClick={() => setSidebarOpen(false)}
                      className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                      aria-label="Close sidebar"
                    >
                      <X className="h-5 w-5" />
                    </button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="h-10 w-full bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse" />
                    <div className="h-10 w-full bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse" />
                    <div className="h-10 w-full bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse" />
                    <div className="h-10 w-full bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse" />
                  </div>
                  
                  <div className="mt-6 pt-6 border-t border-border">
                    <div className="h-4 w-24 bg-gray-200 dark:bg-gray-700 rounded animate-pulse mb-3" />
                    <div className="space-y-3">
                      <div className="h-10 w-full bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse" />
                    </div>
                  </div>
                  
                  <div className="mt-6 pt-6 border-t border-border">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="flex-shrink-0">
                        <div className="w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-700 animate-pulse" />
                      </div>
                      <div className="min-w-0 flex-1">
                        <div className="h-4 w-3/4 bg-gray-200 dark:bg-gray-700 rounded animate-pulse mb-1" />
                        <div className="h-3 w-1/2 bg-gray-200 dark:bg-gray-700 rounded animate-pulse" />
                      </div>
                    </div>
                    <div className="h-10 w-full bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse" />
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
          
          {/* Overlay for mobile when sidebar is open */}
          {sidebarOpen && (
            <div 
              className="fixed inset-0 bg-black/50 z-40 lg:hidden"
              onClick={() => setSidebarOpen(false)}
            ></div>
          )}

          {/* Main Content Area */}
          <div className={`flex-1 flex flex-col transition-all duration-300 ${
            sidebarCollapsed ? 'lg:ml-16' : 'lg:ml-80'
          }`}>
            {/* Header Skeleton */}
            <div className="bg-[#F4F7FA] dark:bg-[#0C111D]">
              <div className="px-4 sm:px-6 lg:px-8 py-1">
                <div className="flex items-center justify-end w-full">
                  <div className="lg:hidden absolute left-4">
                    <div className="h-6 w-32 bg-gray-200 rounded animate-pulse"></div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="h-10 w-10 bg-gray-200 rounded-full animate-pulse"></div>
                  </div>
                </div>
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-6 mt-4">
                  <div className="space-y-2">
                    <div className="h-8 w-48 bg-gray-200 rounded animate-pulse"></div>
                    <div className="h-4 w-64 bg-gray-300 rounded animate-pulse"></div>
                  </div>
                  <div className="h-10 w-40 bg-gray-200 rounded animate-pulse"></div>
                </div>
              </div>
            </div>

            <div className="flex-1 px-4 sm:px-6 lg:px-8 py-12">
              <div className="grid grid-cols-1 gap-8">
                {/* Main Content Skeleton */}
                <div className="col-span-1">
                  <Card className="bg-card border-0 rounded-2xl overflow-hidden animate-pulse">
                    <CardHeader className="space-y-2">
                      <div className="flex items-center space-x-2">
                        <div className="h-5 w-5 bg-gray-200 dark:bg-gray-700 rounded-full"></div>
                        <div className="h-6 w-48 bg-gray-200 dark:bg-gray-700 rounded"></div>
                      </div>
                      <div className="h-4 w-64 bg-gray-200 dark:bg-gray-700 rounded"></div>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-2">
                          <div className="h-4 w-24 bg-gray-200 dark:bg-gray-700 rounded"></div>
                          <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
                        </div>
                        <div className="space-y-2">
                          <div className="h-4 w-24 bg-gray-200 dark:bg-gray-700 rounded"></div>
                          <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <div className="h-4 w-332 bg-gray-200 dark:bg-gray-700 rounded"></div>
                        <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-2">
                          <div className="h-4 w-24 bg-gray-200 dark:bg-gray-700 rounded"></div>
                          <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
                        </div>
                        <div className="space-y-2">
                          <div className="h-4 w-24 bg-gray-200 dark:bg-gray-700 rounded"></div>
                          <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <div className="h-4 w-24 bg-gray-200 dark:bg-gray-700 rounded"></div>
                        <div className="h-20 bg-gray-200 dark:bg-gray-700 rounded"></div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </div>
          </div>
        </div>
      </ProtectedPage>
    );
  }

  // Show a message if resumeData is null (shouldn't happen due to the redirect above, but for safety)
  if (!resumeData) {
    return (
      <ProtectedPage>
        <div className="min-h-screen bg-background flex items-center justify-center">
          <Card className="bg-card border-0 shadow-lg rounded-2xl overflow-hidden p-8">
            <CardContent className="text-center">
              <FileText className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
              <h2 className="text-2xl font-bold mb-2">Resume Not Found</h2>
              <p className="text-muted-foreground mb-6">
                The requested resume could not be found.
              </p>
              <Button asChild>
                <Link href="/dashboard">Back to Dashboard</Link>
              </Button>
            </CardContent>
          </Card>
        </div>
      </ProtectedPage>
    );
  }

  // Ensure templateId is a valid number
  const validTemplateId = resumeData.templateId && typeof resumeData.templateId === 'number' && resumeData.templateId > 0 
    ? resumeData.templateId 
    : null;

  return (
    <ProtectedPage>
      <style jsx global>{`
        .pdf-content, .pdf-content * {
          color: #000000 !important;
          background-color: #ffffff !important;
        }
        .pdf-content h1, .pdf-content h2, .pdf-content h3, .pdf-content h4, .pdf-content h5, .pdf-content h6 {
          color: #000000 !important;
        }
        .pdf-content p, .pdf-content span, .pdf-content div {
          color: #000000 !important;
        }
        .pdf-content .text-muted-foreground {
          color: #666666 !important;
        }
        
        @media print {
          body {
            background-color: #ffffff !important;
            margin: 0;
            padding: 0;
            -webkit-print-color-adjust: exact !important;
            color-adjust: exact !important;
          }
          .pdf-content {
            box-shadow: none !important;
            border: none !important;
            margin: 0 !important;
            padding: 0 !important;
            width: 100% !important;
            max-width: 100% !important;
            background-color: transparent !important; /* Allow template backgrounds to show */
          }
          .pdf-content .rounded-2xl {
            border-radius: 1rem !important;
          }
          .pdf-content .shadow-lg {
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04) !important;
          }
          .pdf-content .p-8 {
            padding: 2rem !important;
          }
          .no-print, .no-print * {
            display: none !important;
          }
          .pdf-content .absolute {
            position: absolute !important;
          }
          /* Prevent browser from adding headers/footers */
          @page {
            margin: 0;
          }
          /* Preserve template background colors */
          .pdf-content .bg-gray-800 {
            background-color: #1f2937 !important;
            -webkit-print-color-adjust: exact !important;
            color-adjust: exact !important;
          }
          .pdf-content .bg-amber-500 {
            background-color: #f59e0b !important;
            -webkit-print-color-adjust: exact !important;
            color-adjust: exact !important;
          }
          .pdf-content .text-white {
            color: #ffffff !important;
          }
        }
      `}</style>
      <div className="h-screen flex bg-background">
        {/* Sidebar */}
        <div className={`fixed inset-y-0 left-0 z-50 bg-background transform ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} transition-transform duration-300 ease-in-out lg:translate-x-0 lg:flex-shrink-0 lg:h-screen ${
          sidebarCollapsed ? 'w-16 lg:w-16' : 'w-64 lg:w-80'
        }`}>
          <div className="h-full overflow-y-auto">
            <div className="h-full">
              {/* Using a simplified sidebar for resume view */}
              <div className="flex flex-col h-full">
                <div className="px-6 py-4 border-b border-border">
                  <div className="flex items-center justify-between">
                    <h2 className="text-lg font-semibold text-foreground">Resumify</h2>
                    <button 
                      className="lg:hidden"
                      onClick={() => setSidebarOpen(false)}
                    >
                      <X className="h-5 w-5" />
                    </button>
                  </div>
                </div>
                <div className="flex-1 px-4 py-6">
                  <nav className="space-y-2">
                    <Button 
                      asChild
                      variant="ghost"
                      className="w-full justify-start"
                    >
                      <Link href="/dashboard">
                        <ArrowLeft className="h-4 w-4 mr-2" />
                        Back to Dashboard
                      </Link>
                    </Button>
                  </nav>
                </div>
                <div className="p-4 border-t border-border">
                  <Button 
                    asChild
                    variant="outline"
                    className="w-full"
                  >
                    <Link href={`/edit/${id}`}>
                      <Edit className="h-4 w-4 mr-2" />
                      Edit Resume
                    </Link>
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Overlay for mobile when sidebar is open */}
        {sidebarOpen && (
          <div 
            className="fixed inset-0 bg-black/50 z-40 lg:hidden"
            onClick={() => setSidebarOpen(false)}
          ></div>
        )}

        {/* Main Content Area */}
        <div className={`flex-1 flex flex-col transition-all duration-300 ${
          sidebarCollapsed ? 'lg:ml-16' : 'lg:ml-80'
        }`}>
          {/* Header with gradient - Fixed */}
          <div className="bg-[#F4F7FA] dark:bg-[#0C111D] flex-shrink-0">
            <div className="px-4 sm:px-6 lg:px-8 py-1">
              <div className="flex items-center justify-end w-full">
                <div className="lg:hidden absolute left-4">
                  <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Resumify</h1>
                </div>
                <div className="flex items-center space-x-3">
                  {/* Hamburger menu button for mobile */}
                  <button 
                    className="lg:hidden focus:outline-none focus:ring-2 focus:ring-gray-500/50 rounded-full p-1"
                    onClick={() => setSidebarOpen(!sidebarOpen)}
                  >
                    <Menu className="h-6 w-6 text-gray-900 dark:text-white" />
                  </button>

                  <ThemeToggle className="bg-gray-200 border-gray-300 hover:bg-gray-300" />
                  <button className="focus:outline-none focus:ring-2 focus:ring-gray-500/50 rounded-full p-1">
                    {getUserAvatar()}
                  </button>
                </div>
              </div>
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-6">
                <div>
                  <h1 className="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-white">
                    {resumeData.personalInfo?.firstName} {resumeData.personalInfo?.lastName}&apos;s Resume
                  </h1>
                  <p className="text-gray-700 mt-2 dark:text-white">
                    {resumeData.personalInfo?.headline}
                  </p>
                </div>
                <div className="flex flex-col sm:flex-row gap-3 items-center">
                  <Button 
                    onClick={handleDownload}
                    className="bg-white text-purple-600 hover:bg-white/90 shadow-lg rounded-full font-medium"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download PDF
                  </Button>
                  <Button 
                    onClick={handlePrint}
                    variant="outline"
                    className="bg-white/20 text-white border-white/30 hover:bg-white/30 rounded-full"
                  >
                    <Printer className="h-4 w-4 mr-2" />
                    Print
                  </Button>
                  <Button 
                    onClick={handleShare}
                    variant="outline"
                    className="bg-white/20 text-white border-white/30 hover:bg-white/30 rounded-full"
                  >
                    <Share2 className="h-4 w-4 mr-2" />
                    Share
                  </Button>
                  <Button 
                    asChild
                    variant="outline"
                    className="bg-white/20 text-white border-white/30 hover:bg-white/30 rounded-full"
                  >
                    <Link href={`/edit/${id}`}>
                      <Edit className="h-4 w-4 mr-2" />
                      Edit
                    </Link>
                  </Button>
                </div>
              </div>
            </div>
          </div>

          {/* Main Content - Scrollable Area */}
          <div className="flex-1 overflow-y-auto px-4 sm:px-6 lg:px-8 py-6">
            <div className="max-w-4xl mx-auto py-6">
              {/* Resume Content - This is what will be converted to PDF */}
              <div ref={resumeRef} className="pdf-content">
                {/* Debug information - Remove this in production */}
                <div className="mb-4 p-2 bg-yellow-100 text-yellow-800 text-sm rounded hidden">
                  Template ID: {resumeData.templateId ?? 'null'} | Type: {typeof resumeData.templateId} | Valid Template ID: {validTemplateId ?? 'null'}
                </div>
                
                {/* Check if resume has a template ID and display using template */}
                {validTemplateId ? (
                  <div className="rounded-lg shadow-lg">
                    <TemplatePreview 
                      templateId={validTemplateId} 
                      resumeData={{
                        personalInfo: {
                          firstName: resumeData.personalInfo?.firstName || "",
                          lastName: resumeData.personalInfo?.lastName || "",
                          email: resumeData.personalInfo?.email || "",
                          phone: resumeData.personalInfo?.phone || "",
                          location: resumeData.personalInfo?.location || "",
                          headline: resumeData.personalInfo?.headline || "",
                          summary: resumeData.personalInfo?.summary || ""
                        },
                        workExperience: resumeData.workExperience || [],
                        education: resumeData.education || [],
                        skills: resumeData.skills || []
                      }} 
                      imagePreview={resumeData.basics?.image || null} 
                    />
                  </div>
                ) : (
                  {/* Fallback to default display if no template */}
                  <Card className="bg-card border-0 shadow-lg rounded-2xl overflow-hidden relative" style={{ backgroundColor: '#ffffff', color: '#000000' }}>
                    {/* Quick Edit Button */}
                    <Button 
                      asChild
                      size="sm"
                      className="absolute top-4 right-4 bg-white text-purple-600 hover:bg-white/90 shadow-lg rounded-full h-10 w-10 p-0 no-print"
                    >
                      <Link href={`/edit/${id}`}>
                        <Edit className="h-5 w-5" />
                      </Link>
                    </Button>
                    
                    <CardContent className="p-8" style={{ color: '#000000', backgroundColor: '#ffffff' }}>
                      {/* Personal Info */}
                      <div className="mb-8">
                        <div className="flex flex-col sm:flex-row sm:items-start gap-6">
                          {/* Profile Image */}
                          {resumeData?.basics?.image ? (
                            <div className="flex-shrink-0">
                              <div className="w-24 h-24 rounded-full overflow-hidden border-4 border-white shadow-lg">
                                <Image 
                                  src={resumeData.basics.image} 
                                  alt={`${resumeData.personalInfo?.firstName} ${resumeData.personalInfo?.lastName}`}
                                  width={96}
                                  height={96}
                                  className="w-full h-full object-cover"
                                />
                              </div>
                            </div>
                          ) : (
                            <div className="flex-shrink-0">
                              <div className="w-24 h-24 rounded-full bg-gray-200 border-4 border-white shadow-lg flex items-center justify-center">
                                <User className="h-12 w-12 text-gray-400" />
                              </div>
                            </div>
                          )}
                          
                          <div>
                            <h1 className="text-3xl font-bold text-foreground">
                              {resumeData?.personalInfo?.firstName} {resumeData?.personalInfo?.lastName}
                            </h1>
                            <p className="text-lg text-muted-foreground mt-1">
                              {resumeData?.personalInfo?.headline}
                            </p>
                            
                            <div className="flex flex-wrap gap-4 mt-4">
                              <div className="flex items-center text-muted-foreground">
                                <Mail className="h-4 w-4 mr-2" />
                                <span>{resumeData?.personalInfo?.email}</span>
                              </div>
                              <div className="flex items-center text-muted-foreground">
                                <Phone className="h-4 w-4 mr-2" />
                                <span>{resumeData?.personalInfo?.phone}</span>
                              </div>
                              <div className="flex items-center text-muted-foreground">
                                <MapPin className="h-4 w-4 mr-2" />
                                <span>{resumeData?.personalInfo?.location}</span>
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        {/* Full Width Summary */}
                        {resumeData?.personalInfo?.summary && (
                          <div className="mt-6">
                            <div 
                              className="text-foreground prose prose-sm max-w-none" 
                              dangerouslySetInnerHTML={{ __html: resumeData.personalInfo.summary }}
                            />
                          </div>
                        )}
                      </div>

                      {/* Work Experience */}
                      {resumeData?.workExperience && resumeData.workExperience.length > 0 && (
                        <div className="mb-8">
                          <h2 className="text-2xl font-bold text-foreground mb-4 flex items-center">
                            <Briefcase className="h-5 w-5 mr-2 text-blue-500" />
                            Work Experience
                          </h2>
                          <div className="space-y-6">
                            {resumeData.workExperience.map((exp) => (
                              <div key={exp.id} className="border-l-2 border-blue-500 pl-4 py-1">
                                <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start">
                                  <div>
                                    <h3 className="text-xl font-semibold text-foreground">{exp.position}</h3>
                                    <p className="text-lg text-muted-foreground">{exp.company}</p>
                                  </div>
                                  <p className="text-muted-foreground mt-1 sm:mt-0">
                                    {exp.startDate} - {exp.current ? "Present" : exp.endDate}
                                  </p>
                                </div>
                                <div 
                                  className="text-foreground mt-2 prose prose-sm max-w-none" 
                                  dangerouslySetInnerHTML={{ __html: exp.description }}
                                />
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Education */}
                      {resumeData?.education && resumeData.education.length > 0 && (
                        <div className="mb-8">
                          <h2 className="text-2xl font-bold text-foreground mb-4 flex items-center">
                            <GraduationCap className="h-5 w-5 mr-2 text-green-500" />
                            Education
                          </h2>
                          <div className="space-y-6">
                            {resumeData.education.map((edu) => (
                              <div key={edu.id} className="border-l-2 border-green-500 pl-4 py-1">
                                <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start">
                                  <div>
                                    <h3 className="text-xl font-semibold text-foreground">{edu.degree}</h3>
                                    <p className="text-lg text-muted-foreground">{edu.institution}</p>
                                    <p className="text-muted-foreground">{edu.field}</p>
                                  </div>
                                  <p className="text-muted-foreground mt-1 sm:mt-0">
                                    {edu.startDate} - {edu.endDate}
                                  </p>
                                </div>
                                <div 
                                  className="text-foreground mt-2 prose prose-sm max-w-none" 
                                  dangerouslySetInnerHTML={{ __html: edu.description }}
                                />
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Skills */}
                      {resumeData?.skills && resumeData.skills.length > 0 && (
                        <div>
                          <h2 className="text-2xl font-bold text-foreground mb-4 flex items-center">
                            <FileText className="h-5 w-5 mr-2 text-indigo-500" />
                            Skills
                          </h2>
                          <div className="flex flex-wrap gap-2">
                            {resumeData.skills.map((skill: string, index: number) => (
                              <Badge key={index} variant="secondary" className="rounded-full px-3 py-1">
                                {skill}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}
              </div>
            </div>
          </div>
          
          {/* Dynamic Dock Component */}
          <div className="mt-auto px-4 sm:px-6 lg:px-8">
            <DynamicDock currentPage="resume" showLogout={false} />
          </div>
          
          {/* Footer */}
          <DashboardFooter />
        </div>
      </div>
    </ProtectedPage>
  );
}